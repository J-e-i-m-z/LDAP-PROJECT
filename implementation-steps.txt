LDAP PROJECT



STEP 1 - PREREQUISITES
- Ubuntu Azure VM

- A Static Public IP (Highly Recommended): 
  This prevents the IP from changing on restart, which is crucial for certificate consistency. 

- FQDN for Certificates: 
  Since I don't have a domain, I use the VM's Public IP address as the Common Name in the certificate. 
  This is not ideal for a real production setup (where you'd use a real DNS name) but is perfect for practice.

-  Open Ports in Azure NSG: Ensure VM's Network Security Group allows:
   Port 389 (LDAP): For initial testing and unencrypted communication (will be disabled later).
   Port 636 (LDAPS): For secure LDAP over SSL/TLS.

STEP 2 - INSTALLING AND CONFIGURING LDAP
- Install the OpenLDAP server (slapd) and the client utilities.
  sudo apt update
  sudo apt install slapd ldap-utils

- During the installation, you will be prompted for an administrator password. 
  Choose a very strong password and remember it. This is for the LDAP root user

- Reconfigure slapd for a Custom Base DN:
  It's best to set up your Domain Name (DN) correctly from the start. Let's assume our organization is "example".
  sudo dpkg-reconfigure slapd

  Answer the prompts as follows:

    Omit OpenLDAP server configuration? No
    DNS domain name: example.com (This forms the base of your LDAP tree, e.g., dc=example,dc=com)
    Organization name: example
    Administrator password: Enter the strong password you set during install.
    Database backend: MDB
    Remove the database when slapd is purged? No
    Move old database? Yes
    Allow LDAPv2 protocol? No

- Verify the Installation:
  Check if the server is running and listening on ports 389 and 636.
  sudo systemctl status slapd
  sudo netstat -tnlp | grep slapd # You should see it listening on 0.0.0.0:389 and :::389

- Test a Simple LDAP Query:
  Query your own root DSE (Directory System Entry) to confirm it's working.
  ldapsearch -x -LLL -H ldap:/// -b "" -s base "(objectclass=*)" namingContexts # You should see output like: namingContexts: dc=mycompany,dc=local
  sudo ldapsearch -Q -LLL -Y EXTERNAL -H ldapi:/// -b cn=config dn  # Confirm LDAP server config is accessible.
  ldapsearch -x -LLL -H ldap:/// -b dc=example,dc=com dn # Confirm your directory tree is alive (you’ll see your base DN).

STEP 3 - LDAP VERIFICATION STEPS
- Anonymous Bind
  ldapwhoami -x
  Output: anonymous
  - Confirms the server accepts anonymous connections.

- Simple Bind as Admin
  ldapwhoami -x -D cn=admin,dc=example,dc=com -W
  Output: dn:cn=admin,dc=example,dc=com
  - Confirms admin credentials work (password verified).

- SASL/EXTERNAL Authentication (as current user)
  ldapwhoami -Y EXTERNAL -H ldapi:/// -Q
  Output (example for user james): dn:gidNumber=1000+uidNumber=1000,cn=peercred,cn=external,cn=auth
  - Confirms system user (james) can authenticate via UNIX socket.

- SASL/EXTERNAL Authentication (as root)
  sudo ldapwhoami -Y EXTERNAL -H ldapi:/// -Q
  Output: dn:gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
  - Confirms root has full access to cn=config, needed for server management.


STEP 4 -  SECURING LDAP WITH TLS/SSL (LDAPS)
  1. INSTALL REQUIRED PACKAGES
- Install the gnutls-bin and ssl-cert packages:
  sudo apt install gnutls-bin ssl-cert
  
  2. CREATE CERTIFICATE AUTHORITY (CA)
- Create a private key for the Certificate Authority
  sudo certtool --generate-privkey --bits 4096 --outfile /etc/ssl/private/mycakey.pem

- Create CA info template
  sudo vim /etc/ssl/ca.info

  PASTE:
  cn = Example Company
  ca
  cert_signing_key
  expiration_days = 3650

- Generate self-signed CA certificate
  sudo certtool --generate-self-signed \
  --load-privkey /etc/ssl/private/mycakey.pem \
  --template /etc/ssl/ca.info \
  --outfile /usr/local/share/ca-certificates/mycacert.crt

- Update trusted CA certificates
  sudo update-ca-certificates

  3. CREATE SERVER CERTIFICATE
- Create server private key
  sudo certtool --generate-privkey \
  --bits 2048 \
  --outfile /etc/ldap/ldap_server_key.pem

- Create server info file
  sudo vim /etc/ssl/ldap.info

- Generate server certificate
  sudo certtool --generate-certificate \
  --load-privkey /etc/ldap/ldap_server_key.pem \
  --load-ca-certificate /etc/ssl/certs/mycacert.pem \
  --load-ca-privkey /etc/ssl/private/mycakey.pem \
  --template /etc/ssl/ldap.info \
  --outfile /etc/ldap/ldap_server_cert.pem

- Set proper permissions
  sudo chgrp openldap /etc/ldap/ldap_server_key.pem
  sudo chmod 0640 /etc/ldap/ldap_server_key.pem

  4. CONFIGURE LDAP TO USE TLS
- Create the LDIF configuration file
  sudo vim ~/certinfo.ldif

  dn: cn=config
  add: olcTLSCACertificateFile
  olcTLSCACertificateFile: /etc/ssl/certs/mycacert.pem
  -
  add: olcTLSCertificateFile
  olcTLSCertificateFile: /etc/ldap/ldap_server_cert.pem
  -
  add: olcTLSCertificateKeyFile
  olcTLSCertificateKeyFile: /etc/ldap/ldap_server_key.pem

- Apply the TLS configuration
  sudo ldapmodify -Y EXTERNAL -H ldapi:/// -f ~/certinfo.ldif

  5. ENABLE LDAPS AND RESTART SERVICE 
- Edit slapd configuration to enable LDAPS
  sudo vim /etc/default/slapd

  Find the SLAPD_SERVICES line and change it to:
  SLAPD_SERVICES="ldap:/// ldapi:/// ldaps:///"

- Restart the service
  sudo systemctl restart slapd
  sudo systemctl status slapd

- Verify it's listening on LDAPS port (636)
  sudo netstat -tnlp | grep :636

   6. FORCE CLIENT TO TRUST LDAP SERVER'S TLS CA EXPLICITLY 
- We generated our own CA (mycacert.pem) and signed the server cert with it.
- By default, ldapwhoami / ldapsearch doesn't know about that CA, so the TLS handshake will fail.

  sudo vim /etc/ldap/ldap.conf

- ADD THIS LINE:
  TLS_CACERT /etc/ssl/certs/mycacert.pem

- That way, even if ldap.conf isn’t being read, it knows which CA to trust.
   
- TEST: 
  ldapwhoami -x -H ldaps://4.221.168.19 -D "cn=admin,dc=example,dc=com" -W

  7. TEST THE TLS CONFIGURATION
- Test from your local machine (replace with your VM IP)
  ldapwhoami -x -H ldaps://4.221.168.19

































